#!/bin/bash
#
# üöÄ ORTI Finance - Script Unificato v3.0
# Gestisce setup, avvio, stop, test e reset del database.
#

set -e

# --- Stile e colori ---
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# --- Configurazione ---
API_PORT=8000
FRONTEND_PORT=8080
API_URL="http://localhost:${API_PORT}"

# --- Caricamento .env ---
if [ -f .env ]; then
    export $(cat .env | sed 's/#.*//g' | xargs)
fi

# --- Funzioni di utilit√† ---
print_header() {
    echo -e "${BLUE}üöÄ ORTI Finance - Pannello di Controllo${NC}"
    echo "========================================"
}

check_deps() {
    command -v python3 >/dev/null 2>&1 || { echo -e "${RED}‚ùå Python 3 non trovato. Installalo.${NC}"; exit 1; }
    command -v npm >/dev/null 2>&1 || { echo -e "${RED}‚ùå npm non trovato. Installa Node.js e npm.${NC}"; exit 1; }
    command -v psql >/dev/null 2>&1 || { echo -e "${RED}‚ùå psql non trovato. Installa PostgreSQL client.${NC} (Necessario per 'db:reset')"; }
    echo -e "${GREEN}‚úÖ Dipendenze di base OK.${NC}"
}

kill_processes() {
    echo -e "${YELLOW}üßπ Pulizia processi esistenti su porte ${API_PORT} e ${FRONTEND_PORT}...${NC}"
    lsof -ti:${API_PORT} | xargs kill -9 2>/dev/null || true
    lsof -ti:${FRONTEND_PORT} | xargs kill -9 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Pulizia completata.${NC}"
}

# --- Comandi Principali ---
cmd_setup() {
    print_header
    echo -e "${BLUE}üîß Setup dipendenze backend...${NC}"
    cd orti-finance-api && pip3 install -r requirements.txt && cd ..
    echo -e "${GREEN}‚úÖ Backend pronto.${NC}"

    echo -e "${BLUE}‚öõÔ∏è Setup dipendenze frontend...${NC}"
    cd orti-finance-compass && npm install && cd ..
    echo -e "${GREEN}‚úÖ Frontend pronto.${NC}"
    echo -e "${GREEN}üéâ Setup completo! Esegui './orti start' per avviare.${NC}"
}

cmd_start() {
    print_header
    kill_processes
    echo -e "${BLUE}üöÄ Avvio servizi...${NC}"

    # Avvio Backend
    echo -e "${YELLOW}üîß Avvio Backend API su ${API_URL}...${NC}"
    cd orti-finance-api
    uvicorn main:app --host 0.0.0.0 --port ${API_PORT} --reload &
    BACKEND_PID=$!
    cd ..

    # Attesa Backend
    until curl -s "${API_URL}/status" > /dev/null; do
        echo -e "${YELLOW}‚è≥ In attesa del backend...${NC}"
        sleep 2
    done
    echo -e "${GREEN}‚úÖ Backend attivo (PID: ${BACKEND_PID}).${NC}"

    # Avvio Frontend
    echo -e "${YELLOW}üé® Avvio Frontend su http://localhost:${FRONTEND_PORT}...${NC}"
    cd orti-finance-compass
    npm run dev -- --port ${FRONTEND_PORT} &
    FRONTEND_PID=$!
    cd ..

    echo -e "${GREEN}‚úÖ Frontend avviato (PID: ${FRONTEND_PID}).${NC}"
    echo ""
    echo -e "${GREEN}üéâ Sistema ORTI Finance avviato!${NC}"
    echo -e "   üé® App: http://localhost:${FRONTEND_PORT}"
    echo -e "   üîß API: ${API_URL}/docs"
    echo -e "\n${RED}Premi Ctrl+C per fermare tutti i servizi.${NC}"

    trap "echo -e '\n${RED}üõë Fermando i servizi...${NC}'; kill $BACKEND_PID $FRONTEND_PID 2>/dev/null; exit 0" INT
    wait
}

cmd_stop() {
    print_header
    kill_processes
}

cmd_status() {
    print_header
    echo -e "${BLUE}üìä Stato del sistema ORTI Finance:${NC}"

    if curl -s "${API_URL}/status" | grep -q "API Status"; then
        echo -e "${GREEN}‚úÖ Backend: Attivo su ${API_URL}${NC}"
    else
        echo -e "${RED}‚ùå Backend: Non risponde${NC}"
    fi

    if curl -s "http://localhost:${FRONTEND_PORT}" | grep -q "ORTI Finance"; then
        echo -e "${GREEN}‚úÖ Frontend: Attivo su http://localhost:${FRONTEND_PORT}${NC}"
    else
        echo -e "${RED}‚ùå Frontend: Non risponde${NC}"
    fi
}

cmd_test() {
    print_header
    echo -e "${BLUE}üß™ Esecuzione test CRUD di base...${NC}"
    if ! curl -s "${API_URL}/status" > /dev/null; then
        echo -e "${RED}‚ùå Test fallito: il backend non √® attivo. Esegui './orti start' prima.${NC}"
        exit 1
    fi
    RESPONSE=$(curl -s -X GET "${API_URL}/entries?limit=1")
    if echo "$RESPONSE" | grep -q '"success":true'; then
        echo -e "${GREEN}‚úÖ Test READ superato.${NC}"
    else
        echo -e "${RED}‚ùå Test READ fallito.${NC}"
        echo "$RESPONSE"
    fi
}

cmd_db_reset() {
    print_header
    if [ -z "$DATABASE_URL" ]; then
        echo -e "${RED}‚ùå La variabile DATABASE_URL non √® impostata nel file .env!${NC}"
        exit 1
    fi
    echo -e "${YELLOW}‚ö†Ô∏è ATTENZIONE: stai per CANCELLARE e ricreare i dati ORTI nel database.${NC}"
    read -p "Sei sicuro di voler continuare? (s/n) " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        echo -e "${BLUE}üîÑ Esecuzione script reset_database.sql...${NC}"
        psql "$DATABASE_URL" -f orti-finance-api/reset_database.sql
        echo -e "${GREEN}‚úÖ Database resettato con successo!${NC}"
    else
        echo -e "${RED}Abbandonato.${NC}"
    fi
}


# --- Logica Principale ---
case "${1:-start}" in
    start)
        cmd_start
        ;;
    stop)
        cmd_stop
        ;;
    status)
        cmd_status
        ;;
    test)
        cmd_test
        ;;
    db:reset)
        cmd_db_reset
        ;;
    setup)
        check_deps
        cmd_setup
        ;;
    *)
        echo "Comando non riconosciuto: $1"
        echo "Uso: $0 [start|stop|status|test|db:reset|setup]"
        exit 1
        ;;
esac
