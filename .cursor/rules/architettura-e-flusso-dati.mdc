---
alwaysApply: true
---

# Architettura e Flusso Dati Ibrida

## Architettura Principale:
- **Ibrida**: Combina flusso stabile via backend con real-time direct Supabase per efficienza.
- **Flusso Principale**: Frontend (React) → Backend (FastAPI) → Supabase Service → Database (Supabase).
- **Flusso Real-Time**: Frontend → Supabase Client → Database per subscriptions automatiche (es. `useFinancialDataRealtime.ts`).

## Componenti Chiave:
- **Frontend**: React con hooks per API e real-time (es. `useOptimizedFinanceAPI.ts`).
- **Backend**: FastAPI in `main.py` per logica business, AI e aggregazioni (es. summary, variance).
- **Database**: Supabase con RLS abilitato; usa `supabase_service.py` per interazioni.
- **AI**: Sequential Thinking MCP per analisi avanzate.

## Flusso Dati Ottimizzato:
- **Lettura**: Query aggregate via backend (es. `/summary`); real-time subscriptions per sync automatico.
- **Scrittura**: CRUD via Supabase direct patterns (es. `supabase.from('entries').upsert()`); post-mutazione, refresh via `loadData()`.
- **Sync**: Niente polling; usa `postgres_changes` events per aggiornamenti UI.
- **Migration Plan**: Phase 1: Parallel (attuale + Supabase direct). Phase 2: Integra subscriptions. Phase 3: Full Supabase per scaling.

## Vantaggi:
- Stabilità backend per business logic.
- Real-time e scalabilità da Supabase.
- Separazione dati: Consolidated (reali), Projections (previsioni), Combined.